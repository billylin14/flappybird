module redMovement (clk, reset, L, R, position);

	input logic clk, reset, L, R;
	output logic [7:0] position;
	
	normalLight L8 (.clk(clock_select), .reset(SW[9]), .L(L), .R(R), .NL(1'b0), .NR(position[6]), .lightOn(position[7])); //8
	normalLight L7 (.clk(clock_select), .reset(SW[9]), .L(L), .R(R), .NL(position[7]), .NR(position[5]), .lightOn(position[6])); //7
	normalLight L6 (.clk(clock_select), .reset(SW[9]), .L(L), .R(R), .NL(position[6]), .NR(position[4]), .lightOn(position[5])); //6
	centerLight L5 (.clk(clock_select), .reset(SW[9]), .L(L), .R(R), .NL(position[5]), .NR(position[3]), .lightOn(position[4])); //5
	normalLight L4 (.clk(clock_select), .reset(SW[9]), .L(L), .R(R), .NL(position[4]), .NR(position[2]), .lightOn(position[3])); //4
	normalLight L3 (.clk(clock_select), .reset(SW[9]), .L(L), .R(R), .NL(position[3]), .NR(position[1]), .lightOn(position[2])); //3
	normalLight L2 (.clk(clock_select), .reset(SW[9]), .L(L), .R(R), .NL(position[2]), .NR(position[0]), .lightOn(position[1])); //2
	normalLight L1 (.clk(clock_select), .reset(SW[9]), .L(L), .R(R), .NL(position[1]), .NR(1'b0), .lightOn(position[0])); //1

endmodule

module redMovement_testbench();

	logic clk, reset, L, R;
	logic [7:0]position;
	
	logic cycle;
	
	// Set up the clock.
	parameter CLOCK_PERIOD=100;
	
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD/2) clk <= ~clk;
	end
	
	birdMovement dut (clk, reset, press, cycle, position);
	
	initial begin
		@(posedge clk);
		reset <= 1;				@(posedge clk);
		reset <= 0;				@(posedge clk);
		@(posedge clk);
		for (int i = 0; i <= 20; i++) begin
			L <= 1;	R <= 0;		@(posedge clk);
			L <= 1;	R <= 0;		@(posedge clk);
		end
		$stop;
	end
	
endmodule

	